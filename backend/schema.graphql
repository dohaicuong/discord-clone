### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Channel implements Node {
  channelCategory: ChannelCategory

  """Relay ID"""
  id: ID!
  messages(
    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the last n elements from the list."""
    last: Int!
  ): MessageConnection!
  name: String!
}

type ChannelCategory implements Node {
  channels(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
  ): ChannelConnection!

  """Relay ID"""
  id: ID!
  name: String!
  server: Server
}

type ChannelCategoryConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ChannelCategoryEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input ChannelCategoryCreateInput {
  name: String!
  serverId: RelayId!
}

type ChannelCategoryCreatePayload {
  channelCategory: ChannelCategory
}

type ChannelCategoryEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: ChannelCategory!
}

type ChannelConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ChannelEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input ChannelCreateInput {
  channelCategoryId: RelayId!
  name: String!
}

type ChannelCreatePayload {
  channel: Channel!
}

type ChannelEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Channel!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input FriendAddInput {
  friendId: RelayId!
}

type FriendAddPayload {
  friend: User
  user: User
}

input FriendRemoveInput {
  friendId: RelayId!
}

type FriendRemovePayload {
  friend: User
  user: User
}

input LoginMutationInput {
  email: String!
  password: String!
}

type LoginMutationPayload {
  token: String!
  user: User!
}

scalar Media

type Message implements Node {
  author: User
  channel: Channel
  content: String!
  createdAt: DateTime!

  """Relay ID"""
  id: ID!
  updatedAt: DateTime!
}

type MessageConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [MessageEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input MessageCreateInput {
  channelId: RelayId!
  content: String!
}

type MessageCreatePayload {
  message: Message!
}

input MessageCreateSubscriptionFilters {
  channelId: RelayId
}

type MessageCreateSubscriptionPayload {
  message: Message!
}

type MessageEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Message!
}

type Mutation {
  channelCategoryCreate(input: ChannelCategoryCreateInput!): ChannelCategoryCreatePayload
  channelCreate(input: ChannelCreateInput!): ChannelCreatePayload
  friendAdd(input: FriendAddInput!): FriendAddPayload
  friendRemove(input: FriendRemoveInput!): FriendAddPayload
  login(input: LoginMutationInput!): LoginMutationPayload!
  messageCreate(input: MessageCreateInput!): MessageCreatePayload
  serverCreate(input: ServerCreateInput!): ServerCreatePayload!

  """Server Owner invite user"""
  serverInviteUser(input: ServerInviteUserInput!): ServerInviteUserPayload!
  serverJoinUser(input: ServerJoinInput!): ServerJoinPayload!
  signup(input: SignupMutationInput!): SignupMutationPayload!
}

interface Node {
  """Relay ID"""
  id: ID!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  me: User
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node!]
  users(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
  ): UserConnection!
}

scalar RelayId

type Server implements Node {
  channelCategories(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
  ): ChannelCategoryConnection!

  """Relay ID"""
  id: ID!
  logo: Media
  serverUsers(
    """Returns the elements in the list that come after the specified cursor"""
    after: String
    filters: ServerUsersConnectionFilters

    """Returns the first n elements from the list."""
    first: Int!
  ): ServerServerUsers_Connection!
  title: String!
}

input ServerCreateInput {
  logo: Upload
  nickname: String
  title: String!
}

type ServerCreatePayload {
  server: Server
  userServer: UsersOnServers
}

input ServerInviteUserInput {
  serverId: RelayId!
  userId: RelayId!
}

type ServerInviteUserPayload {
  userServer: UsersOnServers
}

input ServerJoinInput {
  serverId: RelayId!
}

type ServerJoinPayload {
  userServer: UsersOnServers
}

type ServerServerUsers_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UsersOnServersEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input ServerUsersConnectionFilters {
  currentUser: Boolean
}

input SignupMutationInput {
  avatar: Upload
  email: String!
  password: String!
  username: String!
}

type SignupMutationPayload {
  token: String!
  user: User!
}

type Subscription {
  messageCreated(filters: MessageCreateSubscriptionFilters): MessageCreateSubscriptionPayload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements Node {
  avatar: Media
  email: String!
  friends(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
  ): UserConnection!

  """Relay ID"""
  id: ID!
  userServers(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
  ): UsersOnServersConnection!
  username: String!
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User!
}

enum UserRole {
  OTHER
  SERVER_BOOSTER
  SERVER_OWNER
}

type UsersOnServers implements Node {
  """Relay ID"""
  id: ID!
  nickname: String!
  role: UserRole!
  server: Server!
  user: User!
}

type UsersOnServersConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UsersOnServersEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type UsersOnServersEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: UsersOnServers!
}
