/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./api/context/index"
import { FileUploadPromise, Media } from "./api/graphql/scalars/Upload"
import { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    relayId<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "RelayId";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
    media<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Media";
    iceCandidate<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "IceCandidate";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    relayId<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "RelayId";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
    media<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Media";
    iceCandidate<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "IceCandidate";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ChannelCategoryCreateInput: { // input type
    name: string; // String!
    serverId: NexusGenScalars['RelayId']; // RelayId!
  }
  ChannelCreateInput: { // input type
    channelCategoryId: NexusGenScalars['RelayId']; // RelayId!
    channelType?: NexusGenEnums['ChannelType'] | null; // ChannelType
    name: string; // String!
  }
  FriendAddInput: { // input type
    friendId: NexusGenScalars['RelayId']; // RelayId!
  }
  FriendRemoveInput: { // input type
    friendId: NexusGenScalars['RelayId']; // RelayId!
  }
  LoginMutationInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  MessageCreateInput: { // input type
    channelId: NexusGenScalars['RelayId']; // RelayId!
    content: string; // String!
  }
  MessageCreateSubscriptionFilters: { // input type
    channelId?: NexusGenScalars['RelayId'] | null; // RelayId
  }
  ServerCreateInput: { // input type
    logo?: NexusGenScalars['Upload'] | null; // Upload
    nickname?: string | null; // String
    title: string; // String!
  }
  ServerInviteUserInput: { // input type
    serverId: NexusGenScalars['RelayId']; // RelayId!
    userId: NexusGenScalars['RelayId']; // RelayId!
  }
  ServerJoinInput: { // input type
    serverId: NexusGenScalars['RelayId']; // RelayId!
  }
  ServerUsersConnectionFilters: { // input type
    currentUser?: boolean | null; // Boolean
  }
  SignupMutationInput: { // input type
    avatar?: NexusGenScalars['Upload'] | null; // Upload
    email: string; // String!
    password: string; // String!
    username: string; // String!
  }
  StreamSessionJoinInput: { // input type
    candidates: NexusGenScalars['IceCandidate'][]; // [IceCandidate!]!
    offer: string; // String!
  }
}

export interface NexusGenEnums {
  ChannelType: "TEXT" | "VOICE"
  UserRole: "OTHER" | "SERVER_BOOSTER" | "SERVER_OWNER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  IceCandidate: any
  Media: Media
  RelayId: any
  Upload: FileUploadPromise
}

export interface NexusGenObjects {
  Channel: { // root type
    channelCategory?: NexusGenRootTypes['ChannelCategory'] | null; // ChannelCategory
    channelType: NexusGenEnums['ChannelType']; // ChannelType!
    name: string; // String!
  }
  ChannelCategory: { // root type
    name: string; // String!
  }
  ChannelCategoryConnection: { // root type
    edges: NexusGenRootTypes['ChannelCategoryEdge'][]; // [ChannelCategoryEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ChannelCategoryCreatePayload: { // root type
    channelCategory?: NexusGenRootTypes['ChannelCategory'] | null; // ChannelCategory
  }
  ChannelCategoryEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['ChannelCategory']; // ChannelCategory!
  }
  ChannelConnection: { // root type
    edges: NexusGenRootTypes['ChannelEdge'][]; // [ChannelEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ChannelCreatePayload: { // root type
    channel: NexusGenRootTypes['Channel']; // Channel!
  }
  ChannelEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Channel']; // Channel!
  }
  FriendAddPayload: { // root type
    friend?: NexusGenRootTypes['User'] | null; // User
    user?: NexusGenRootTypes['User'] | null; // User
  }
  FriendRemovePayload: { // root type
    friend?: NexusGenRootTypes['User'] | null; // User
    user?: NexusGenRootTypes['User'] | null; // User
  }
  LoginMutationPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Message: { // root type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  MessageConnection: { // root type
    edges: NexusGenRootTypes['MessageEdge'][]; // [MessageEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  MessageCreatePayload: { // root type
    message: NexusGenRootTypes['Message']; // Message!
  }
  MessageCreateSubscriptionPayload: { // root type
    message: NexusGenRootTypes['Message']; // Message!
  }
  MessageEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Message']; // Message!
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
  Server: { // root type
    logo?: NexusGenScalars['Media'] | null; // Media
    title: string; // String!
  }
  ServerCreatePayload: { // root type
    server?: NexusGenRootTypes['Server'] | null; // Server
    userServer?: NexusGenRootTypes['UsersOnServers'] | null; // UsersOnServers
  }
  ServerInviteUserPayload: { // root type
    userServer?: NexusGenRootTypes['UsersOnServers'] | null; // UsersOnServers
  }
  ServerJoinPayload: { // root type
    userServer?: NexusGenRootTypes['UsersOnServers'] | null; // UsersOnServers
  }
  ServerServerUsers_Connection: { // root type
    edges: NexusGenRootTypes['UsersOnServersEdge'][]; // [UsersOnServersEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  SignupMutationPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  StreamSessionJoinPayload: { // root type
    answer: string; // String!
    candidates: NexusGenScalars['IceCandidate'][]; // [IceCandidate!]!
  }
  Subscription: {};
  User: { // root type
    avatar?: NexusGenScalars['Media'] | null; // Media
    email: string; // String!
    username: string; // String!
  }
  UserConnection: { // root type
    edges: NexusGenRootTypes['UserEdge'][]; // [UserEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UserEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['User']; // User!
  }
  UsersOnServers: { // root type
    nickname: string; // String!
    role: NexusGenEnums['UserRole']; // UserRole!
  }
  UsersOnServersConnection: { // root type
    edges: NexusGenRootTypes['UsersOnServersEdge'][]; // [UsersOnServersEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UsersOnServersEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['UsersOnServers']; // UsersOnServers!
  }
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['Channel'] | NexusGenRootTypes['ChannelCategory'] | NexusGenRootTypes['Message'] | NexusGenRootTypes['Server'] | NexusGenRootTypes['User'] | NexusGenRootTypes['UsersOnServers'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Channel: { // field return type
    channelCategory: NexusGenRootTypes['ChannelCategory'] | null; // ChannelCategory
    channelType: NexusGenEnums['ChannelType']; // ChannelType!
    id: string; // ID!
    messages: NexusGenRootTypes['MessageConnection']; // MessageConnection!
    name: string; // String!
  }
  ChannelCategory: { // field return type
    channels: NexusGenRootTypes['ChannelConnection']; // ChannelConnection!
    id: string; // ID!
    name: string; // String!
    server: NexusGenRootTypes['Server'] | null; // Server
  }
  ChannelCategoryConnection: { // field return type
    edges: NexusGenRootTypes['ChannelCategoryEdge'][]; // [ChannelCategoryEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ChannelCategoryCreatePayload: { // field return type
    channelCategory: NexusGenRootTypes['ChannelCategory'] | null; // ChannelCategory
  }
  ChannelCategoryEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['ChannelCategory']; // ChannelCategory!
  }
  ChannelConnection: { // field return type
    edges: NexusGenRootTypes['ChannelEdge'][]; // [ChannelEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ChannelCreatePayload: { // field return type
    channel: NexusGenRootTypes['Channel']; // Channel!
  }
  ChannelEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Channel']; // Channel!
  }
  FriendAddPayload: { // field return type
    friend: NexusGenRootTypes['User'] | null; // User
    user: NexusGenRootTypes['User'] | null; // User
  }
  FriendRemovePayload: { // field return type
    friend: NexusGenRootTypes['User'] | null; // User
    user: NexusGenRootTypes['User'] | null; // User
  }
  LoginMutationPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Message: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    channel: NexusGenRootTypes['Channel'] | null; // Channel
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  MessageConnection: { // field return type
    edges: NexusGenRootTypes['MessageEdge'][]; // [MessageEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  MessageCreatePayload: { // field return type
    message: NexusGenRootTypes['Message']; // Message!
  }
  MessageCreateSubscriptionPayload: { // field return type
    message: NexusGenRootTypes['Message']; // Message!
  }
  MessageEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Message']; // Message!
  }
  Mutation: { // field return type
    channelCategoryCreate: NexusGenRootTypes['ChannelCategoryCreatePayload'] | null; // ChannelCategoryCreatePayload
    channelCreate: NexusGenRootTypes['ChannelCreatePayload'] | null; // ChannelCreatePayload
    friendAdd: NexusGenRootTypes['FriendAddPayload'] | null; // FriendAddPayload
    friendRemove: NexusGenRootTypes['FriendAddPayload'] | null; // FriendAddPayload
    login: NexusGenRootTypes['LoginMutationPayload']; // LoginMutationPayload!
    messageCreate: NexusGenRootTypes['MessageCreatePayload'] | null; // MessageCreatePayload
    serverCreate: NexusGenRootTypes['ServerCreatePayload']; // ServerCreatePayload!
    serverInviteUser: NexusGenRootTypes['ServerInviteUserPayload']; // ServerInviteUserPayload!
    serverJoinUser: NexusGenRootTypes['ServerJoinPayload']; // ServerJoinPayload!
    signup: NexusGenRootTypes['SignupMutationPayload']; // SignupMutationPayload!
    streamSessionJoin: NexusGenRootTypes['StreamSessionJoinPayload']; // StreamSessionJoinPayload!
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    node: NexusGenRootTypes['Node'] | null; // Node
    nodes: NexusGenRootTypes['Node'][] | null; // [Node!]
    users: NexusGenRootTypes['UserConnection']; // UserConnection!
  }
  Server: { // field return type
    channelCategories: NexusGenRootTypes['ChannelCategoryConnection']; // ChannelCategoryConnection!
    id: string; // ID!
    logo: NexusGenScalars['Media'] | null; // Media
    serverUsers: NexusGenRootTypes['ServerServerUsers_Connection']; // ServerServerUsers_Connection!
    title: string; // String!
  }
  ServerCreatePayload: { // field return type
    server: NexusGenRootTypes['Server'] | null; // Server
    userServer: NexusGenRootTypes['UsersOnServers'] | null; // UsersOnServers
  }
  ServerInviteUserPayload: { // field return type
    userServer: NexusGenRootTypes['UsersOnServers'] | null; // UsersOnServers
  }
  ServerJoinPayload: { // field return type
    userServer: NexusGenRootTypes['UsersOnServers'] | null; // UsersOnServers
  }
  ServerServerUsers_Connection: { // field return type
    edges: NexusGenRootTypes['UsersOnServersEdge'][]; // [UsersOnServersEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  }
  SignupMutationPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  StreamSessionJoinPayload: { // field return type
    answer: string; // String!
    candidates: NexusGenScalars['IceCandidate'][]; // [IceCandidate!]!
  }
  Subscription: { // field return type
    messageCreated: NexusGenRootTypes['MessageCreateSubscriptionPayload'] | null; // MessageCreateSubscriptionPayload
  }
  User: { // field return type
    avatar: NexusGenScalars['Media'] | null; // Media
    email: string; // String!
    friends: NexusGenRootTypes['UserConnection']; // UserConnection!
    id: string; // ID!
    userServers: NexusGenRootTypes['UsersOnServersConnection']; // UsersOnServersConnection!
    username: string; // String!
  }
  UserConnection: { // field return type
    edges: NexusGenRootTypes['UserEdge'][]; // [UserEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UserEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['User']; // User!
  }
  UsersOnServers: { // field return type
    id: string; // ID!
    nickname: string; // String!
    role: NexusGenEnums['UserRole']; // UserRole!
    server: NexusGenRootTypes['Server']; // Server!
    user: NexusGenRootTypes['User']; // User!
  }
  UsersOnServersConnection: { // field return type
    edges: NexusGenRootTypes['UsersOnServersEdge'][]; // [UsersOnServersEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  UsersOnServersEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['UsersOnServers']; // UsersOnServers!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  Channel: { // field return type name
    channelCategory: 'ChannelCategory'
    channelType: 'ChannelType'
    id: 'ID'
    messages: 'MessageConnection'
    name: 'String'
  }
  ChannelCategory: { // field return type name
    channels: 'ChannelConnection'
    id: 'ID'
    name: 'String'
    server: 'Server'
  }
  ChannelCategoryConnection: { // field return type name
    edges: 'ChannelCategoryEdge'
    pageInfo: 'PageInfo'
  }
  ChannelCategoryCreatePayload: { // field return type name
    channelCategory: 'ChannelCategory'
  }
  ChannelCategoryEdge: { // field return type name
    cursor: 'String'
    node: 'ChannelCategory'
  }
  ChannelConnection: { // field return type name
    edges: 'ChannelEdge'
    pageInfo: 'PageInfo'
  }
  ChannelCreatePayload: { // field return type name
    channel: 'Channel'
  }
  ChannelEdge: { // field return type name
    cursor: 'String'
    node: 'Channel'
  }
  FriendAddPayload: { // field return type name
    friend: 'User'
    user: 'User'
  }
  FriendRemovePayload: { // field return type name
    friend: 'User'
    user: 'User'
  }
  LoginMutationPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Message: { // field return type name
    author: 'User'
    channel: 'Channel'
    content: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    updatedAt: 'DateTime'
  }
  MessageConnection: { // field return type name
    edges: 'MessageEdge'
    pageInfo: 'PageInfo'
  }
  MessageCreatePayload: { // field return type name
    message: 'Message'
  }
  MessageCreateSubscriptionPayload: { // field return type name
    message: 'Message'
  }
  MessageEdge: { // field return type name
    cursor: 'String'
    node: 'Message'
  }
  Mutation: { // field return type name
    channelCategoryCreate: 'ChannelCategoryCreatePayload'
    channelCreate: 'ChannelCreatePayload'
    friendAdd: 'FriendAddPayload'
    friendRemove: 'FriendAddPayload'
    login: 'LoginMutationPayload'
    messageCreate: 'MessageCreatePayload'
    serverCreate: 'ServerCreatePayload'
    serverInviteUser: 'ServerInviteUserPayload'
    serverJoinUser: 'ServerJoinPayload'
    signup: 'SignupMutationPayload'
    streamSessionJoin: 'StreamSessionJoinPayload'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Query: { // field return type name
    me: 'User'
    node: 'Node'
    nodes: 'Node'
    users: 'UserConnection'
  }
  Server: { // field return type name
    channelCategories: 'ChannelCategoryConnection'
    id: 'ID'
    logo: 'Media'
    serverUsers: 'ServerServerUsers_Connection'
    title: 'String'
  }
  ServerCreatePayload: { // field return type name
    server: 'Server'
    userServer: 'UsersOnServers'
  }
  ServerInviteUserPayload: { // field return type name
    userServer: 'UsersOnServers'
  }
  ServerJoinPayload: { // field return type name
    userServer: 'UsersOnServers'
  }
  ServerServerUsers_Connection: { // field return type name
    edges: 'UsersOnServersEdge'
    pageInfo: 'PageInfo'
    totalCount: 'Int'
  }
  SignupMutationPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  StreamSessionJoinPayload: { // field return type name
    answer: 'String'
    candidates: 'IceCandidate'
  }
  Subscription: { // field return type name
    messageCreated: 'MessageCreateSubscriptionPayload'
  }
  User: { // field return type name
    avatar: 'Media'
    email: 'String'
    friends: 'UserConnection'
    id: 'ID'
    userServers: 'UsersOnServersConnection'
    username: 'String'
  }
  UserConnection: { // field return type name
    edges: 'UserEdge'
    pageInfo: 'PageInfo'
  }
  UserEdge: { // field return type name
    cursor: 'String'
    node: 'User'
  }
  UsersOnServers: { // field return type name
    id: 'ID'
    nickname: 'String'
    role: 'UserRole'
    server: 'Server'
    user: 'User'
  }
  UsersOnServersConnection: { // field return type name
    edges: 'UsersOnServersEdge'
    pageInfo: 'PageInfo'
  }
  UsersOnServersEdge: { // field return type name
    cursor: 'String'
    node: 'UsersOnServers'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Channel: {
    messages: { // args
      before?: string | null; // String
      last: number; // Int!
    }
  }
  ChannelCategory: {
    channels: { // args
      after?: string | null; // String
      first: number; // Int!
    }
  }
  Mutation: {
    channelCategoryCreate: { // args
      input: NexusGenInputs['ChannelCategoryCreateInput']; // ChannelCategoryCreateInput!
    }
    channelCreate: { // args
      input: NexusGenInputs['ChannelCreateInput']; // ChannelCreateInput!
    }
    friendAdd: { // args
      input: NexusGenInputs['FriendAddInput']; // FriendAddInput!
    }
    friendRemove: { // args
      input: NexusGenInputs['FriendRemoveInput']; // FriendRemoveInput!
    }
    login: { // args
      input: NexusGenInputs['LoginMutationInput']; // LoginMutationInput!
    }
    messageCreate: { // args
      input: NexusGenInputs['MessageCreateInput']; // MessageCreateInput!
    }
    serverCreate: { // args
      input: NexusGenInputs['ServerCreateInput']; // ServerCreateInput!
    }
    serverInviteUser: { // args
      input: NexusGenInputs['ServerInviteUserInput']; // ServerInviteUserInput!
    }
    serverJoinUser: { // args
      input: NexusGenInputs['ServerJoinInput']; // ServerJoinInput!
    }
    signup: { // args
      input: NexusGenInputs['SignupMutationInput']; // SignupMutationInput!
    }
    streamSessionJoin: { // args
      input: NexusGenInputs['StreamSessionJoinInput']; // StreamSessionJoinInput!
    }
  }
  Query: {
    node: { // args
      id: string; // ID!
    }
    nodes: { // args
      ids: string[]; // [ID!]!
    }
    users: { // args
      after?: string | null; // String
      first: number; // Int!
    }
  }
  Server: {
    channelCategories: { // args
      after?: string | null; // String
      first: number; // Int!
    }
    serverUsers: { // args
      after?: string | null; // String
      filters?: NexusGenInputs['ServerUsersConnectionFilters'] | null; // ServerUsersConnectionFilters
      first: number; // Int!
    }
  }
  Subscription: {
    messageCreated: { // args
      filters?: NexusGenInputs['MessageCreateSubscriptionFilters'] | null; // MessageCreateSubscriptionFilters
    }
  }
  User: {
    friends: { // args
      after?: string | null; // String
      first: number; // Int!
    }
    userServers: { // args
      after?: string | null; // String
      first: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Node: "Channel" | "ChannelCategory" | "Message" | "Server" | "User" | "UsersOnServers"
}

export interface NexusGenTypeInterfaces {
  Channel: "Node"
  ChannelCategory: "Node"
  Message: "Node"
  Server: "Node"
  User: "Node"
  UsersOnServers: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}